@page "/encomenda/create"
@using Microsoft.EntityFrameworkCore
@using QueVistoHoje.GestaoDeLoja.Data.Entities
@inject IDbContextFactory<QueVistoHoje.GestaoDeLoja.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Encomenda</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Encomenda" OnValidSubmit="AddEncomenda" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="mb-3">
                <label for="data" class="form-label">Data:</label>
                <InputDate id="data" @bind-Value="Encomenda.Data" class="form-control" />
                <ValidationMessage For="() => Encomenda.Data" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="estado" class="form-label">Estado:</label>
                <InputText id="estado" @bind-Value="Encomenda.Estado" class="form-control" />
                <ValidationMessage For="() => Encomenda.Estado" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="enderecoentrega" class="form-label">EnderecoEntrega:</label>
                <InputText id="enderecoentrega" @bind-Value="Encomenda.EnderecoEntrega" class="form-control" />
                <ValidationMessage For="() => Encomenda.EnderecoEntrega" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/encomenda">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Encomenda Encomenda { get; set; } = new();

    protected override void OnInitialized()
    {
        Encomenda.Data = DateTime.Now;
    }

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddEncomenda()
    {
        using var context = DbFactory.CreateDbContext();
        context.Encomendas.Add(Encomenda);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/encomenda");
    }
}