@page "/encomenda/create"
@attribute [Authorize(Roles = "Funcionário, Administrador")]
@using Microsoft.EntityFrameworkCore
@using QueVistoHoje.GestaoDeLoja.Data.Entities
@using Microsoft.AspNetCore.Identity
@using QueVistoHoje.GestaoDeLoja.Data
@using Microsoft.AspNetCore.Identity.EntityFrameworkCore
@inject IDbContextFactory<QueVistoHoje.GestaoDeLoja.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject UserManager<ApplicationUser> UserManager

<PageTitle>Criar Encomenda</PageTitle>

<h1>Criar Encomenda</h1>

<h2>Encomenda</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Encomenda" OnValidSubmit="AddEncomenda" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <div class="mb-3">
                <label for="cliente" class="form-label">Cliente:</label>
                <InputSelect id="cliente" @bind-Value="SelectedClienteIdString" class="form-control">
                    <option value="">Selecione um cliente</option>
                    @foreach (var cliente in Clientes)
                    {
                        <option value="@cliente.Id">@cliente.UserName (@cliente.Nome)</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => SelectedClienteIdString" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="data" class="form-label">Data:</label>
                <InputDate id="data" @bind-Value="Encomenda.Data" class="form-control" />
                <ValidationMessage For="() => Encomenda.Data" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="metodoPagamento" class="form-label">Método de Pagamento:</label>
                <InputSelect id="metodoPagamento" @bind-Value="Encomenda.MetodoPagamento" class="form-control">
                    <option value="">Selecione um método de pagamento</option>
                    @foreach (MetodoPagamento metodo in Enum.GetValues(typeof(MetodoPagamento)))
                    {
                        <option value="@metodo"> @Encomenda.GetMetodoPagamentoString(metodo)</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => Encomenda.MetodoPagamento" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="estado" class="form-label">Estado:</label>
                <InputSelect id="estado" @bind-Value="Encomenda.Estado" class="form-control">
                    <option value="">Selecione um estado</option>
                    @foreach (EncomendaState estado in Enum.GetValues(typeof(EncomendaState)))
                    {
                        <option value="@estado">@Encomenda.GetEstadoString(estado)</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => Encomenda.Estado" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="enderecoentrega" class="form-label">Endereço de Entrega:</label>
                <InputText id="enderecoentrega" @bind-Value="Encomenda.EnderecoEntrega" class="form-control" />
                <ValidationMessage For="() => Encomenda.EnderecoEntrega" class="text-danger" />
            </div>

            <div class="mb-3">
                <label class="form-label">Produtos:</label>
                @foreach (var item in SelectedProdutos)
                {
                    <p>@item.Produto.Nome x @item.Quantidade</p>
                }
                <button type="button" class="btn btn-secondary" @onclick="ToggleProductSelection">Adicionar Produto</button>
            </div>

            @if (ShowProductSelection)
            {
                <div class="col-md-12">
                    <EditForm Model="NewEncomendaProduto" OnValidSubmit="AddProductToEncomenda" FormName="addProduct" method="post" Enhance Context="productContext">
                        <h3>Adicionar Produto</h3>
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" role="alert" />
                        <div class="mb-3">
                            <label for="produto" class="form-label">Produto:</label>
                            <InputSelect id="produto" @bind-Value="NewEncomendaProduto.ProdutoId" class="form-control">
                                <option value="">Selecione um produto</option>
                                @foreach (var produto in Produtos)
                                {
                                    <option value="@produto.Id">@produto.Nome</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="() => NewEncomendaProduto.ProdutoId" class="text-danger" />
                        </div>
                        <div class="mb-3">
                            <label for="quantidade" class="form-label">Quantidade:</label>
                            <InputNumber id="quantidade" @bind-Value="NewEncomendaProduto.Quantidade" class="form-control" />
                            <ValidationMessage For="() => NewEncomendaProduto.Quantidade" class="text-danger" />
                        </div>
                        <button type="submit" class="btn btn-primary">Adicionar</button>
                    </EditForm>
                </div>
            }
            <button type="submit" class="btn btn-primary">Criar Encomenda</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/encomenda">Voltar para a Lista</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Encomenda Encomenda { get; set; } = new();

    [SupplyParameterFromForm]
    private string? SelectedClienteIdString { get; set; }

    private EncomendaProdutoModel NewEncomendaProduto { get; set; } = new();

    private List<ApplicationUser> Clientes { get; set; } = new();
    private List<Produto> Produtos { get; set; } = new();

    private List<EncomendaProdutoModel> SelectedProdutos { get; set; } = new();

    private bool ShowProductSelection { get; set; } = false;


    protected override async Task OnInitializedAsync()
    {
        Encomenda.Data = DateTime.Now;

        using var context = DbFactory.CreateDbContext();

        // Load clientes (users with "Cliente" role)
        var clienteRole = await context.Roles.FirstOrDefaultAsync(r => r.Name == "Cliente");
        if (clienteRole != null)
        {
            Clientes = await context.UserRoles
                .Where(ur => ur.RoleId == clienteRole.Id)
                .Join(context.Users, ur => ur.UserId, u => u.Id, (ur, u) => u)
                .ToListAsync();
        }

        // Load produtos
        Produtos = await context.Produtos.ToListAsync();
    }

    private void ToggleProductSelection()
    {
        ShowProductSelection = !ShowProductSelection;
    }

    private async Task AddProductToEncomenda()
    {
        using var context = DbFactory.CreateDbContext();

        if (NewEncomendaProduto.ProdutoId != 0)
        {
            var product = Produtos.FirstOrDefault(x => x.Id == NewEncomendaProduto.ProdutoId);
            if (product != null)
            {
                SelectedProdutos.Add(new EncomendaProdutoModel { Produto = product, Quantidade = NewEncomendaProduto.Quantidade });

                NewEncomendaProduto = new EncomendaProdutoModel();
            }
        }

        ShowProductSelection = false;
    }


    private async Task AddEncomenda()
    {
        using var context = DbFactory.CreateDbContext();

        // Set the selected cliente
        if (!string.IsNullOrEmpty(SelectedClienteIdString))
        {
            var cliente = await context.Users.FindAsync(SelectedClienteIdString);
            if (cliente != null)
            {
                Encomenda.Cliente = cliente;
            }
            else
            {
                Console.WriteLine("\n\n\n\n\nCliente not found using the Id" + SelectedClienteIdString);
            }
        }
        else
        {
            Console.WriteLine("\n\n\n\n\nSelectedClienteIdString is null or empty");
        }


        //Create the relationship entries
        foreach (var encomendaProdutoModel in SelectedProdutos)
        {
            var produtoFromDb = await context.Produtos.FindAsync(encomendaProdutoModel.Produto.Id);
            if (produtoFromDb != null)
            {
                Encomenda.EncomendaProdutos.Add(new EncomendaProduto { Produto = produtoFromDb, Quantidade = encomendaProdutoModel.Quantidade });
            }
            else
            {
                Console.WriteLine("\n\n\n\n\nProduto not found using the Id" + encomendaProdutoModel.Produto.Id);
            }
        }
        Encomenda.CalcularPrecoTotal();
        // Save changes
        context.Encomendas.Add(Encomenda);
        await context.SaveChangesAsync();

        NavigationManager.NavigateTo("/encomenda");
    }
    public class EncomendaProdutoModel
    {
        public int ProdutoId { get; set; }
        public Produto Produto { get; set; }
        public int Quantidade { get; set; }
    }
}