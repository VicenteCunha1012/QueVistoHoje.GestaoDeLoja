@page "/encomenda"
@attribute [Authorize(Roles = "Funcionário, Administrador")]
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using QueVistoHoje.GestaoDeLoja.Data.Entities
@using QueVistoHoje.GestaoDeLoja.Data
@implements IAsyncDisposable
@inject IDbContextFactory<QueVistoHoje.GestaoDeLoja.Data.ApplicationDbContext> DbFactory

<PageTitle>Index</PageTitle>

<h1>Index</h1>

<p>
    <a href="encomenda/create">Create New</a>
</p>

<QuickGrid Class="table" Items="context.Encomendas">
    <PropertyColumn Title="Utilizador" Property="encomenda => GetUserEmail(encomenda)" />
    <PropertyColumn Property="encomenda => encomenda.Data" />
    <PropertyColumn Property="encomenda => encomenda.Estado" />
    <PropertyColumn Property="encomenda => encomenda.EnderecoEntrega" />

    <TemplateColumn Context="encomenda">
        <a href="@($"encomenda/edit?id={encomenda.Id}")">Edit</a> |
        <a href="@($"encomenda/details?id={encomenda.Id}")">Details</a> |
        <a href="@($"encomenda/delete?id={encomenda.Id}")">Delete</a>
    </TemplateColumn>
</QuickGrid>

@code {
    private ApplicationDbContext context = default!;

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
    }

    private string? GetUserEmail(Encomenda encomenda)
    {
        if (encomenda?.Cliente != null && context?.Users != null)
        {
            return context.Users.Find(encomenda.Cliente.Id)?.Email;
        }
        return "N/A";
    }



    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
