@page "/encomenda/delete"
@attribute [Authorize(Roles = "Funcionário")]
@using Microsoft.EntityFrameworkCore
@using QueVistoHoje.GestaoDeLoja.Data.Entities
@inject IDbContextFactory<QueVistoHoje.GestaoDeLoja.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Encomenda</h2>
    <hr />
    @if (encomenda is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Data</dt>
            <dd class="col-sm-10">@encomenda.Data</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Estado</dt>
            <dd class="col-sm-10">@encomenda.Estado</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">EnderecoEntrega</dt>
            <dd class="col-sm-10">@encomenda.EnderecoEntrega</dd>
        </dl>
        <EditForm method="post" Model="encomenda" OnValidSubmit="DeleteEncomenda" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(encomenda is null)">Delete</button> |
            <a href="/encomenda">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Encomenda? encomenda;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        encomenda = await context.Encomendas.FirstOrDefaultAsync(m => m.Id == Id);

        if (encomenda is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteEncomenda()
    {
        using var context = DbFactory.CreateDbContext();
        context.Encomendas.Remove(encomenda!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/encomenda");
    }
}
